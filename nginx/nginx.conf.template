worker_processes 1;

events {
    worker_connections 1024;
}

http {
    include       mime.types;
    default_type  application/octet-stream;

    sendfile        on;
    keepalive_timeout  65;

    map $http_upgrade $connection_upgrade {
        default upgrade;
        '' close;
    }

    upstream flask_app {
        server auth:5005;
    }

    upstream grafana {
        server grafana:3000;
    }

    server {
        listen 80;
        server_name ${ROOT_URL};
        return 301 https://$server_name$request_uri;
    }

    server {
        listen 443 ssl;
        server_name ${ROOT_URL};

        ssl_certificate /etc/nginx/ssl/nginx.crt;
        ssl_certificate_key /etc/nginx/ssl/nginx.key;

        ssl_protocols TLSv1.2 TLSv1.3;
        ssl_prefer_server_ciphers on;
        ssl_ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384;

        location / {
            auth_request /auth-grafana;
            auth_request_set $auth_status $upstream_status;
            auth_request_set $auth_user $upstream_http_x_webauth_user;
            auth_request_set $auth_name $upstream_http_x_webauth_name;
            auth_request_set $auth_email $upstream_http_x_webauth_email;

            proxy_pass http://grafana;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header X-Forwarded-Host $host;

            proxy_set_header X-WEBAUTH-USER $auth_user;
            proxy_set_header X-WEBAUTH-NAME $auth_name;
            proxy_set_header X-WEBAUTH-EMAIL $auth_email;

            sub_filter 'http://grafana:3000' 'https://${ROOT_URL}';
            sub_filter_once off;

            error_page 401 = @error401;

            # WebSocket support
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection $connection_upgrade;
        }

        location = /login {
            proxy_pass http://flask_app/login;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header X-Forwarded-Host $host;
        }

        location = /getAToken {
            proxy_pass http://flask_app/getAToken;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header X-Forwarded-Host $host;
        }

        location = /health {
            proxy_pass http://flask_app/health;
        }

        location = /auth-grafana {
            internal;
            proxy_pass http://flask_app/auth-grafana;
            proxy_pass_request_body off;
            proxy_set_header Content-Length "";
            proxy_set_header X-Original-URI $request_uri;
        }

        location @error401 {
            return 302 /login;
        }
    }
}